
You can mount the source code from the host OS into the container when you create the container. This volume mount technique is for development time when you want live reloading.  
docker container run -it --rm --name web1 -p 5000:5000 -e FLASK_APP=app -e FLASK_DEBUG=1 -v $PWD:/app.py web1

The :/app is where the source is in the container.  We specified that in the dockerfile.  We've now mounted that location from the os into the container.  
What's wierd is that it looks like a directory is being mounted to file.

According to https://docs.docker.com/storage/volumes/
it says that bind mounts are different than volumes.  Bind mounts are not as good as volumes.  The volume is a seperate components with an independant life cycle.  It can be hosted is a cloud and is not dependant on the directory structure of a host.
Further, the -v flag has been replaced by the --mount flag. 

It works! However, it only seems to work for the slim build and not the alpine.  I had to replace alpine with slim in the dockerfile.

Actually, nothing seems to update

Container exec command
------------------------
This is a very useful.  It puts you inside your container.  Your can run 
docker container exec -it web1 bash.
